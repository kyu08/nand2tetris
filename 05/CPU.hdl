// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction[15]==0のとき、instructionはAレジスタにloadされる

    // Aレジスタ
    // A命令 || (C命令 && instruction[5] == 1)のときはAレジスタにloadする
    Not(in=instruction[15], out=aInstruction);
    Mux16(a=aluOut, b=instruction, sel=aInstruction, out=aRegisterIn);
    And(a=instruction[15], b=instruction[5], out=cInstructionAndShouldLoad);
    Or(a=aInstruction, b=cInstructionAndShouldLoad, out=aRegisterLoad);
    ARegister(in=aRegisterIn, load=aRegisterLoad, out[0..14]=addressM, out=aRegisterOut);

    //  Dレジスタ
    // TODO: C命令 && D=AのときはAレジスタの値をDレジスタにloadする必要がある
    And(a=instruction[15], b=instruction[4], out=shouldLoadToDRegister);
    DRegister(in=aluOut, load=shouldLoadToDRegister, out=dRegisterOut);

    // ALUの前段のmux
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aluInY);

    // ALU
    ALU(x=dRegisterOut, y=aluInY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=zr, ng=ng);

    // PC
    Not(in=instruction[0], out=notInstruction0);
    Not(in=instruction[1], out=notInstruction1);
    Not(in=instruction[2], out=notInstruction2);
    And(a=notInstruction0, b=notInstruction1, out=shouldNotJumpTemp);
    And(a=shouldNotJumpTemp, b=notInstruction2, out=shouldNotJump); // jjj == 000

    // PC - pcIn
    // aから順にnull, JGT, JEQ, JGE, JLT, JNE, JLE, JMP
    Not(in=zr, out=notZr);
    Not(in=ng, out=notNg);
    And(a=notZr, b=notNg, out=jgt);
    And(a=notZr, b=ng, out=jlt);
    Mux8Way16(a[0]=false, b[0]=jgt, c[0]=zr, d[0]=notNg, e[0]=jlt, f[0]=notZr, g[0]=ng, h[0]=true, sel=instruction[0..2], out[0]=shouldJump);
    Not(in=shouldJump, out=notShouldJump);
    PC(in=aRegisterOut, load=shouldJump, inc=notShouldJump, reset=reset, out[0..14]=pc);
}
