// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    // startAddrは文字列の開始位置を表す
    // 内部的にはcharの配列を持つ。
    // lengthは文字列の長さを、capは文字列のキャパシティを表す
    field int startAddr, length, cap;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      if (0 < maxLength) {
        let startAddr = Memory.alloc(maxLength);
      }
      let cap = maxLength;

      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      if (startAddr = 0) {
        return;
      }

      let length = 0;
      let cap = 0;
      do Memory.deAlloc(startAddr);
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    method int startAddr() {
      return startAddr;
    }

    method int cap() {
      return cap;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return Memory.peek(startAddr+j);
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      do Memory.poke(startAddr+j, c);
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      // maxLengthを超過する前に1増やす
      if (length = cap) {
        let cap = cap + 1;
        let startAddr = Memory.alloc(cap);
      }

      // 末尾にcharを追加
      do Memory.poke(startAddr+length, c);
      let length = length + 1;

      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (length = 0) {
        return;
      }

      do Memory.poke(startAddr+length-1, 0);
      let length = length - 1;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int val, i, d, sign;
      let val = 0;
      let i = 0;
      let sign = 1;
      
      // 先頭が'-'の場合は負の数
      if ((length() > 0) & (charAt(0) = 45)) {
        let sign = -1;
        let i = 1;  // '-'をスキップ
      }

      while (i < length()) {
        let d = charAt(i) - 48;
        if ((-1 < d) & (d < 10)) {
          let val = val*10 + d;
        } else {
          // 整数に変換できなくなった時点でvalを返す
          return val * sign;
        }
        let i = i + 1;
      }
      
      return val * sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var String temp;
      do dispose();

      let temp = String.int2String(val);
      do Output.printString("(");
      do Output.printInt(temp.startAddr()); // Memory[2127] => 0
      // do Output.printInt(temp.length()); // Memory[2127] => 0
      // do Output.printInt(temp.cap()); // Memory[2127] => 0
      do Output.printString(")");

      let startAddr = temp.startAddr();
      let length = temp.length();
      let cap = temp.cap();

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }

    function int reminder(int x, int y) {
      // 商
      var int quotient;
      let quotient = x/y;
      return x - (quotient*y);
    }

    function String int2String(int val) {
      var int lastDigit, c;
      var String temp;
      var String d;

      let lastDigit = String.reminder(val, 10);
      let c = lastDigit + 48;

      do Output.println();
      do Output.printString("---int2String");
      do Output.printString("val:");
      do Output.printInt(val);
      do Output.printString(", lastDigit:");
      do Output.printInt(lastDigit);
      do Output.printString(", c:");
      do Output.printInt(c);
      do Output.println();


      if (val < 10) {
        let temp = String.new(1);
        let temp = temp.appendChar(c);
        do temp.debug();
        return temp;
      } else {
        let temp = String.int2String(val/10);
        let temp = temp.appendChar(c);
        do temp.debug();
        return temp;
      }
    }

    method void debug() {
      var int i;
      // do Output.println();
      // do Output.printString("---");
      // do Output.printInt(startAddr());
      // do Output.println();
      // while (i < length()) {
      //   do Output.printChar(charAt(i));
      //   let i = i + 1;
      // }
      // do Output.printString("---");
      // do Output.println();
      return;
    }
}
