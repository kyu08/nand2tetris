// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)
    static Array twoToThe;

    // Initializes the Math library.
    function void init() {
      let twoToThe = Memory.alloc(16);
      return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
      var int sum, shiftedX, i;
      let shiftedX = x;

      do Math.convertToBin(y);

      while(i < 16) {
        if (Math.bit(i)) {
          let sum = sum + shiftedX;
        }
        // やりたいことは2*shiftedXだが、multiplyの中でmultiplyを呼ぶとデバッグがカオスになりそうだったので加算にした。
        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;
      }

      return sum;
    }

    /** xの2進数で表現したときにi bit目が1かどうかを返す
     * */
    function boolean bit(int i) {
      // twoToTheを利用してi bit目が1かどうかを返す
      return twoToThe[i] = 1;
    }

    /** valueを2進数に変換しtwoToTheに格納する
     * */
    function void convertToBin(int value) {
      var int mask, position;
      var boolean loop;

      let position = 0;
      let loop = true;
      while (loop) {
        if (mask = 0) {
          let mask = 1;
        } else {
          let mask = mask + mask;
        }

        if (~(position > 16)) {
          if (~((value & mask) = 0)) {
            let twoToThe[position] = 1;
          } else {
            let twoToThe[position] = 0;
          }    
        } else {
          let loop = false;
        }

        let position = position + 1;
      }
      return;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
      var int q, answer;
      if (
        ((x = 0) | (y = 0))
        | ((x > 0) & (y > 0) & (x < y)) // xが正, yが正 -> x < yならば商は0
        | ((x > 0) & (y < 0) & (x < -y)) // xが正, yが負 -> x < -yならば商は0
        | ((x < 0) & (y < 0) & (-x < -y)) // xが負, yが負 -> -x < -yならば商は0
        | ((x < 0) & (y > 0) & (-x < y)) // xが負, yが正 -> -x < yならば商は0
      ) {
        return 0;
      }
      let q = Math.divide(x, y + y);

      if (x < 0) {
        let x = -x;
      }
      if (y < 0) {
        let y = -y;
      }
      if (q < 0) {
        let q = -q;
      }

      if ((x -  ((q * y) + (q * y))) < y) {
        let answer = q + q;
      } else {
        let answer = q + q + 1;
      }

      if ((x * y) < 0) {
        let answer = -answer;

      }

      return answer;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int j, answer, temp, tempSquared;
      // NOTE: jack OSではintの範囲は -2^15 ~ 2^15 -1
      // 上位ビットから各bitを1にして2乗したときにxを超えなければ採用する
      let j = 7;
      let answer = 0;

      while (j > -1) {
        let temp = answer + Math.twoToThePower(j);
        let tempSquared = temp * temp;
        
        // tempSquaredがオーバーフローしないようにする
        if (~(tempSquared < 0) & ((tempSquared < x) | (tempSquared = x))) {
          let answer = temp;
        }
        
        let j = j - 1;
      }
      
      return answer;
    }

    // 2^j を計算（左シフト）
    function int twoToThePower(int j) {
        var int result;
        let result = 1;  // 1から始める

        // j回、2を掛ける（左にjビットシフト）
        while (j > 0) {
            let result = result + result;  // result = result * 2 と同じ
            let j = j - 1;
        }

        return result;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
      return 0;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
      return 0;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      return 0;
    }
}
